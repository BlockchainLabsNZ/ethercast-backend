service:
  name: ethercast

plugins:
  - serverless-pseudo-parameters
  - serverless-dynamodb-autoscaling
  - serverless-iam-roles-per-function
  - serverless-webpack

custom:
  webpackIncludeModules: true # enable auto-packing of external modules
  stage: ${opt:stage, self:provider.stage}
  prefix: ${self:service}-${self:custom.stage}
  subscriptionsTable: ${self:custom.prefix}-subscriptions
  receiptsTable: ${self:custom.prefix}-receipts
  notificationTopicName: ${self:custom.prefix}-topic
  sendWebhookLambdaName: ${self:custom.prefix}-send-webhook-lambda
  logQueueName: "serverless-blockstream-${self:custom.stage}-log-firehose.fifo"
  baseDynamoDDBCapacity: ${opt:baseDynamoDDBCapacity, "2"}
  tokenIssuer: ${opt:tokenIssuer, "https://ethercast.auth0.com/"}
  logLevel: ${opt:logLevel, "info"}
  capacities:
    - table: SubscriptionsTable  # DynamoDB Resource
      index:
        - ByUser
        - BySubscriptionArn
      read:
        minimum: ${self:custom.baseDynamoDDBCapacity}        # Minimum read capacity
        maximum: 100      # Maximum read capacity
        usage: 0.8        # Targeted usage percentage
      write:
        minimum: ${self:custom.baseDynamoDDBCapacity}        # Minimum write capacity
        maximum: 100      # Maximum write capacity
        usage: 0.8        # Targeted usage percentage
    - table: WebhookReceiptsTable  # DynamoDB Resource
      index:
        - BySubscriptionId
      read:
        minimum: ${self:custom.baseDynamoDDBCapacity}        # Minimum read capacity
        maximum: 100      # Maximum read capacity
        usage: 0.8        # Targeted usage percentage
      write:
        minimum: ${self:custom.baseDynamoDDBCapacity}        # Minimum write capacity
        maximum: 100      # Maximum write capacity
        usage: 0.8        # Targeted usage percentage

provider:
  name: aws
  runtime: nodejs6.10
  memorySize: 128
  environment:
    LOG_LEVEL: ${self:custom.logLevel}
    SUBSCRIPTIONS_TABLE: ${self:custom.subscriptionsTable}
    WEBHOOK_RECEIPTS_TABLE: ${self:custom.receiptsTable}
    TOKEN_ISSUER: ${self:custom.tokenIssuer}
    NOTIFICATION_TOPIC_NAME: ${self:custom.notificationTopicName}
    NOTIFICATION_LAMBDA_NAME: ${self:custom.sendWebhookLambdaName}
    LOG_QUEUE_NAME: ${self:custom.logQueueName}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchGetItem
        - dynamodb:BatchWriteItem
      Resource:
        - "arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.subscriptionsTable}"
        - "arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.subscriptionsTable}/index/ByUser"
        - "arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.subscriptionsTable}/index/BySubscriptionArn"
        - "arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.receiptsTable}"
        - "arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.receiptsTable}/index/BySubscriptionId"
    - Effect: Allow
      Action:
        - sns:Subscribe
        - sns:Unsubscribe
        - sns:ConfirmSubscription
        - sns:SetSubscriptionAttributes
        - sns:GetTopicAttributes
        - sns:CreateTopic
        - sns:Publish
      Resource:
        - "arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:custom.notificationTopicName}"
    - Effect: Allow
      Action:
        - lambda:CreateAlias
      Resource:
        - "arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:custom.notificationTopicName}"
    - Effect: Allow
      Action:
        - sqs:GetQueueUrl
        - sqs:ReceiveMessage
        - sqs:DeleteMessage
        - sqs:DeleteMessageBatch
      Resource:
        - "arn:aws:sqs:#{AWS::Region}:#{AWS::AccountId}:${self:custom.logQueueName}"

functions:
  # backend
  drain-log-firehose-queue:
    handler: src/pipe/drain-log-firehose-queue.handle
    reservedConcurrency: 1
    timeout: 60
    events:
      - schedule: rate(1 minute)

  send-webhook-request:
    handler: src/pipe/send-webhook-request.handle
    name: ${self:custom.sendWebhookLambdaName}
    timeout: 2

  # CRUD

  auth:
    handler: src/crud/auth.authorize

  list-subs:
    handler: src/crud/list-subs.handle
    events:
      - http:
          method: get
          path: subscriptions
          authorizer:
            name: auth
            resultTtlInSeconds: 300
            type: token
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true

  list-receipts:
    handler: src/crud/list-receipts.handle
    events:
      - http:
          method: get
          path: subscriptions/{id}/receipts
          authorizer:
            name: auth
            resultTtlInSeconds: 300
            type: token
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true

  get-sub:
    handler: src/crud/get-sub.handle
    events:
      - http:
          method: get
          path: subscriptions/{id}
          authorizer:
            name: auth
            resultTtlInSeconds: 300
            type: token
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true

  post-sub:
    handler: src/crud/post-sub.handle
    events:
      - http:
          method: post
          path: subscriptions
          authorizer:
            name: auth
            resultTtlInSeconds: 300
            type: token
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true

  delete-sub:
    handler: src/crud/delete-sub.handle
    events:
      - http:
          method: delete
          path: subscriptions/{id}
          authorizer:
            name: auth
            resultTtlInSeconds: 300
            type: token
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true

resources:
  Description: CRUD API for subscriptions as well as ingest and egest notifications for log firehose
  Resources:
    Topic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.notificationTopicName}
    SubscriptionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.subscriptionsTable}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: user
            AttributeType: S
          - AttributeName: subscriptionArn
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.baseDynamoDDBCapacity}
          WriteCapacityUnits: ${self:custom.baseDynamoDDBCapacity}
        GlobalSecondaryIndexes:
          -
            IndexName: ByUser
            KeySchema:
              - AttributeName: user
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: ${self:custom.baseDynamoDDBCapacity}
              WriteCapacityUnits: ${self:custom.baseDynamoDDBCapacity}
          -
            IndexName: BySubscriptionArn
            KeySchema:
              - AttributeName: subscriptionArn
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: ${self:custom.baseDynamoDDBCapacity}
              WriteCapacityUnits: ${self:custom.baseDynamoDDBCapacity}

    WebhookReceiptsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.receiptsTable}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: subscriptionId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.baseDynamoDDBCapacity}
          WriteCapacityUnits: ${self:custom.baseDynamoDDBCapacity}
        GlobalSecondaryIndexes:
          -
            IndexName: BySubscriptionId
            KeySchema:
              - AttributeName: subscriptionId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: ${self:custom.baseDynamoDDBCapacity}
              WriteCapacityUnits: ${self:custom.baseDynamoDDBCapacity}
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true