service:
  name: ethercast

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-cf-vars

custom:
  subscriptions_table: ${self:service}-${opt:stage, self:provider.stage}-subs
  subscription_arns_table: ${self:service}-${opt:stage, self:provider.stage}-sub-arns
  webhook_receipts_table: ${self:service}-${opt:stage, self:provider.stage}-receipts
  topic: ${self:service}-${opt:stage, self:provider.stage}
  arn:
    subscriptions_table: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:${self:custom.subscriptions_table}
    subscriptions_arns_table: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:${self:custom.subscriptions_arns_table}
    webhook_receipts_table: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:${self:custom.webhook_receipts_table}
    topic: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:custom.topic}

provider:
  name: aws
  region: us-east-1
  runtime: nodejs6.10
  memorySize: 128
  environment: ${self:custom}
  iamRoleStatements: # TODO: restrict IAM using serverless-iam-roles-per-function
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:us-east-1:*:*
    - Effect: Allow
      Action:
        - sns:Subscribe
        - sns:Unsubscribe
      Resource: ${self:custom.arn.topic}

functions:
  # backend

  # ingest:

  # egest: TODO

  # CRUD

  auth:
    handler: src/auth.authorize

  get-sub:
    handler: src/get-sub.handle
    events:
      - http:
          method: get
          path: subscriptions/{id}
          authorizer:
            name: auth
            resultTtlInSeconds: 300
            type: token
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true

  post-sub:
    handler: src/post-sub.handle
    events:
      - http:
          method: post
          path: subscriptions
          authorizer:
            name: auth
            resultTtlInSeconds: 300
            type: token
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true

  delete-sub:
    handler: src/delete-sub.handle
    events:
      - http:
          method: delete
          path: subscriptions/{id}
          authorizer:
            name: auth
            resultTtlInSeconds: 300
            type: token
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true

  list-subs:
    handler: src/list-sub.handle
    events:
      - http:
          method: get
          path: subscriptions
          authorizer:
            name: auth
            resultTtlInSeconds: 300
            type: token
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true

  list-receipts:
    handler: src/list-receipts.handle
    events:
      - http:
          method: get
          path: subscriptions/{id}/receipts
          authorizer:
            name: auth
            resultTtlInSeconds: 300
            type: token
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true

resources:
  Resources:
    Topic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.topic}
    SubscriptionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.subscriptions_table}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: user
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          -
            IndexName: ByUser
            KeySchema:
              - AttributeName: user
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
    SubscriptionArnsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.subscription_arns_table}
        AttributeDefinitions:
          - AttributeName: arn
            AttributeType: S
          - AttributeName: subscriptionId
            AttributeType: S
        KeySchema:
          - AttributeName: arn
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          -
            IndexName: BySubscriptionId
            KeySchema:
              - AttributeName: subscriptionId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
    WebhookReceiptsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.webhook_receipts_table}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: subscriptionId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 10
        GlobalSecondaryIndexes:
          -
            IndexName: BySubscriptionId
            KeySchema:
              - AttributeName: subscriptionId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 10
              WriteCapacityUnits: 10
